<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.pyyf.community.dao.IMessageMapper">

    <!--message的映射结果集-->
    <resultMap type="site.pyyf.community.entity.Message" id="MessageMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="fromId" column="from_id" jdbcType="INTEGER"/>
        <result property="toId" column="to_id" jdbcType="INTEGER"/>
        <result property="conversationId" column="conversation_id" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--全部字段-->
    <sql id="allColumn"> id, from_id, to_id, conversation_id, content, status, create_time </sql>

    <!--添加语句的字段列表-->
    <sql id="insertColumn">
        <if test="fromId != null">
            from_id,
        </if>
        <if test="toId != null">
            to_id,
        </if>
        <if test="conversationId != null and conversationId != ''">
            conversation_id,
        </if>
        <if test="content != null and content != ''">
            content,
        </if>
        <if test="status != null">
            status,
        </if>
        <if test="createTime != null">
            create_time,
        </if>
    </sql>

    <!--添加语句的值列表-->
    <sql id="insertValue">
        <if test="fromId != null">
            #{fromId},
        </if>
        <if test="toId != null">
            #{toId},
        </if>
        <if test="conversationId != null and conversationId != ''">
            #{conversationId},
        </if>
        <if test="content != null and content != ''">
            #{content},
        </if>
        <if test="status != null">
            #{status},
        </if>
        <if test="createTime != null">
            #{createTime},
        </if>
    </sql>

    <!--通用对Message各个属性的值的非空判断-->
    <sql id="commonsValue">
        <if test="fromId != null">
            and from_id = #{fromId}
        </if>
        <if test="toId != null">
            and to_id = #{toId}
        </if>
        <if test="conversationId != null and conversationId != ''">
            and conversation_id = #{conversationId}
        </if>
        <if test="content != null and content != ''">
            and content = #{content}
        </if>
        <if test="status != null">
            and status = #{status}
        </if>
        <if test="createTime != null">
            and create_time = #{createTime}
        </if>
    </sql>

    <!--更新时通用对Message各个属性的值的非空判断-->
    <sql id="updateValue">
        <if test="fromId != null">
            from_id = #{fromId},
        </if>
        <if test="toId != null">
            to_id = #{toId},
        </if>
        <if test="conversationId != null and conversationId != ''">
            conversation_id = #{conversationId},
        </if>
        <if test="content != null and content != ''">
            content = #{content},
        </if>
        <if test="status != null">
            status = #{status},
        </if>
        <if test="createTime != null">
            create_time = #{createTime},
        </if>
    </sql>

    <!--传入message时对Message各个属性的值的非空判断-->
    <sql id="MessageValue">
        <if test="message.fromId != null">
            and from_id = #{message.fromId}
        </if>
        <if test="message.toId != null">
            and to_id = #{message.toId}
        </if>
        <if test="message.conversationId != null and message.conversationId != ''">
            and conversation_id = #{message.conversationId}
        </if>
        <if test="message.content != null and message.content != ''">
            and content = #{message.content}
        </if>
        <if test="message.status != null">
            and status = #{message.status}
        </if>
        <if test="message.createTime != null">
            and create_time = #{message.createTime}
        </if>
    </sql>

    <!--新增message:哪个字段不为空就添加哪列数据,返回自增主键-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="insertColumn"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="insertValue"/>
        </trim>
    </insert>

    <!--删除message:通过主键-->
    <delete id="deleteById">
        delete from message
        <where>
            id = #{id}
        </where>
    </delete>

    <!--查询单个message-->
    <select id="queryById" resultMap="MessageMap">
        select
        <include refid="allColumn"></include>
        from message
        <where>
            id = #{id}
        </where>
    </select>

    <!--通过实体作为筛选条件查询数据-->
    <select id="queryAll" resultMap="MessageMap">
        select
        <include refid="allColumn"></include>
        from message
        <trim prefix="where" prefixOverrides="and" suffixOverrides=",">
            <include refid="commonsValue"></include>
        </trim>
        order by create_time desc
    </select>

    <!--通过实体作为筛选条件查询数量-->
    <select id="queryCount" resultType="java.lang.Integer">
        select
        count(*)
        from message
        <trim prefix="where" prefixOverrides="and" suffixOverrides=",">
            <include refid="commonsValue"></include>
        </trim>
    </select>

    <!--通过实体作为筛选条件分页查询-->
    <select id="queryAllByLimit" resultMap="MessageMap">
        select
        <include refid="allColumn"></include>
        from message
        <trim prefix="where" prefixOverrides="and" suffixOverrides=",">
            <include refid="MessageValue"></include>
        </trim>
        order by create_time desc
        limit #{offset}, #{limit}
    </select>


    <!--通过主键修改数据-->
    <update id="update">
        update message
        <trim prefix="set" prefixOverrides="and" suffixOverrides=",">
            <include refid="updateValue"></include>
        </trim>
        <where>
            id = #{id}
        </where>
    </update>

    <select id="selectConversations" resultType="site.pyyf.community.entity.Message">
        select <include refid="allColumn"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

<!--    查询当前用户的会话数量.-->
    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m
    </select>

<!--    查询某个会话所包含的私信列表.-->
    <select id="selectLetters" resultType="site.pyyf.community.entity.Message">
        select <include refid="allColumn"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

<!--     查询某个会话所包含的私信数量.-->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

<!--    查询未读私信的数量-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>



<!--    查询某个主题下最新的通知-->
    <select id="selectLatestNotice" resultType="site.pyyf.community.entity.Message">
        select <include refid="allColumn"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>

<!--   查询某个主题所包含的通知数量-->
    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

<!--    查询未读的通知的数量-->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

<!--    查询某个主题所包含的通知列表-->
    <select id="selectNotices" resultType="site.pyyf.community.entity.Message">
        select <include refid="allColumn"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>